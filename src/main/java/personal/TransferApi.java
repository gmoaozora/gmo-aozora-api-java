/*
 * GMO Aozora Net Bank Open API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package personal;

import common.ApiCallback;
import common.ApiClient;
import common.ApiException;
import common.ApiResponse;
import common.BeanValidationException;
import common.Configuration;
import common.Pair;
import common.ProgressRequestBody;
import common.ProgressResponseBody;
import com.google.gson.reflect.TypeToken;
import personal.model.RequestTransferStatus;
import personal.model.SpAccountTransferRequest;
import personal.model.SpAccountTransferResponse;
import personal.model.TransferFeeResponse;
import personal.model.TransferRequest;
import personal.model.TransferRequestResponse;
import personal.model.TransferStatusResponse;
import java.io.IOException;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.ValidatorFactory;
import javax.validation.executable.ExecutableValidator;

public class TransferApi {
    private ApiClient apiClient;

    public TransferApi() {
        this(Configuration.getPersonalApiClient());
    }

    public TransferApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for spAccountTransferUsingPOST
     * @param body HTTPリクエストボディ (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spAccountTransferUsingPOSTCall(SpAccountTransferRequest body, String xAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/transfer/spaccounts-transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccessToken != null)
        localVarHeaderParams.put("x-access-token", apiClient.parameterToString(xAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spAccountTransferUsingPOSTValidateBeforeCall(SpAccountTransferRequest body, String xAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { body, xAccessToken };
            Method method = this.getClass().getMethod("spAccountTransferUsingPOSTWithHttpInfo", SpAccountTransferRequest.class, String.class);
            Set<ConstraintViolation<TransferApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = spAccountTransferUsingPOSTCall(body, xAccessToken, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * つかいわけ口座間振替
     * 円普通預金、証券コネクト口座、つかいわけ口座間の振替を実行します 振替の実行は即時となります つかいわけ口座間の明細移動は当APIの対象外です 
     * @param body HTTPリクエストボディ (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @return SpAccountTransferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpAccountTransferResponse spAccountTransferUsingPOST(SpAccountTransferRequest body, String xAccessToken) throws ApiException {
        ApiResponse<SpAccountTransferResponse> resp = spAccountTransferUsingPOSTWithHttpInfo(body, xAccessToken);
        return resp.getData();
    }

    /**
     * つかいわけ口座間振替
     * 円普通預金、証券コネクト口座、つかいわけ口座間の振替を実行します 振替の実行は即時となります つかいわけ口座間の明細移動は当APIの対象外です 
     * @param body HTTPリクエストボディ (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @return ApiResponse&lt;SpAccountTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpAccountTransferResponse> spAccountTransferUsingPOSTWithHttpInfo(SpAccountTransferRequest body, String xAccessToken) throws ApiException {
        com.squareup.okhttp.Call call = spAccountTransferUsingPOSTValidateBeforeCall(body, xAccessToken, null, null);
        Type localVarReturnType = new TypeToken<SpAccountTransferResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * つかいわけ口座間振替 (asynchronously)
     * 円普通預金、証券コネクト口座、つかいわけ口座間の振替を実行します 振替の実行は即時となります つかいわけ口座間の明細移動は当APIの対象外です 
     * @param body HTTPリクエストボディ (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spAccountTransferUsingPOSTAsync(SpAccountTransferRequest body, String xAccessToken, final ApiCallback<SpAccountTransferResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spAccountTransferUsingPOSTValidateBeforeCall(body, xAccessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpAccountTransferResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferFeeUsingPOST
     * @param body HTTPリクエストボディ (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferFeeUsingPOSTCall(TransferRequest body, String xAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/transfer/transferfee";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccessToken != null)
        localVarHeaderParams.put("x-access-token", apiClient.parameterToString(xAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferFeeUsingPOSTValidateBeforeCall(TransferRequest body, String xAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { body, xAccessToken };
            Method method = this.getClass().getMethod("transferFeeUsingPOSTWithHttpInfo", TransferRequest.class, String.class);
            Set<ConstraintViolation<TransferApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = transferFeeUsingPOSTCall(body, xAccessToken, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * 振込手数料事前照会
     * 振込・振込予約をAPIから行うための申請内容の事前チェックと手数料を照会します 画面と同じく最大99件まで登録可能 1件だと通常の振込扱いで2件以上だと一括振込扱いとなります 振込無料回数とポイントについては、算出から振込実行までに変動する可能性があるため、手数料算出時の計算対象から除外してます
     * @param body HTTPリクエストボディ (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @return TransferFeeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransferFeeResponse transferFeeUsingPOST(TransferRequest body, String xAccessToken) throws ApiException {
        ApiResponse<TransferFeeResponse> resp = transferFeeUsingPOSTWithHttpInfo(body, xAccessToken);
        return resp.getData();
    }

    /**
     * 振込手数料事前照会
     * 振込・振込予約をAPIから行うための申請内容の事前チェックと手数料を照会します 画面と同じく最大99件まで登録可能 1件だと通常の振込扱いで2件以上だと一括振込扱いとなります 振込無料回数とポイントについては、算出から振込実行までに変動する可能性があるため、手数料算出時の計算対象から除外してます
     * @param body HTTPリクエストボディ (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @return ApiResponse&lt;TransferFeeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransferFeeResponse> transferFeeUsingPOSTWithHttpInfo(TransferRequest body, String xAccessToken) throws ApiException {
        com.squareup.okhttp.Call call = transferFeeUsingPOSTValidateBeforeCall(body, xAccessToken, null, null);
        Type localVarReturnType = new TypeToken<TransferFeeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 振込手数料事前照会 (asynchronously)
     * 振込・振込予約をAPIから行うための申請内容の事前チェックと手数料を照会します 画面と同じく最大99件まで登録可能 1件だと通常の振込扱いで2件以上だと一括振込扱いとなります 振込無料回数とポイントについては、算出から振込実行までに変動する可能性があるため、手数料算出時の計算対象から除外してます
     * @param body HTTPリクエストボディ (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferFeeUsingPOSTAsync(TransferRequest body, String xAccessToken, final ApiCallback<TransferFeeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferFeeUsingPOSTValidateBeforeCall(body, xAccessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransferFeeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferRequestUsingPOST
     * @param body HTTPリクエストボディ (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferRequestUsingPOSTCall(TransferRequest body, String xAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/transfer/request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccessToken != null)
        localVarHeaderParams.put("x-access-token", apiClient.parameterToString(xAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferRequestUsingPOSTValidateBeforeCall(TransferRequest body, String xAccessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { body, xAccessToken };
            Method method = this.getClass().getMethod("transferRequestUsingPOSTWithHttpInfo", TransferRequest.class, String.class);
            Set<ConstraintViolation<TransferApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = transferRequestUsingPOSTCall(body, xAccessToken, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * 振込依頼
     * 振込・振込予約を申請します 画面と同じく最大99件まで登録可能 1件だと通常の振込扱いで2件以上だと一括振込扱いとなります
     * @param body HTTPリクエストボディ (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @return TransferRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransferRequestResponse transferRequestUsingPOST(TransferRequest body, String xAccessToken) throws ApiException {
        ApiResponse<TransferRequestResponse> resp = transferRequestUsingPOSTWithHttpInfo(body, xAccessToken);
        return resp.getData();
    }

    /**
     * 振込依頼
     * 振込・振込予約を申請します 画面と同じく最大99件まで登録可能 1件だと通常の振込扱いで2件以上だと一括振込扱いとなります
     * @param body HTTPリクエストボディ (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @return ApiResponse&lt;TransferRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransferRequestResponse> transferRequestUsingPOSTWithHttpInfo(TransferRequest body, String xAccessToken) throws ApiException {
        com.squareup.okhttp.Call call = transferRequestUsingPOSTValidateBeforeCall(body, xAccessToken, null, null);
        Type localVarReturnType = new TypeToken<TransferRequestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 振込依頼 (asynchronously)
     * 振込・振込予約を申請します 画面と同じく最大99件まで登録可能 1件だと通常の振込扱いで2件以上だと一括振込扱いとなります
     * @param body HTTPリクエストボディ (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferRequestUsingPOSTAsync(TransferRequest body, String xAccessToken, final ApiCallback<TransferRequestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferRequestUsingPOSTValidateBeforeCall(body, xAccessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransferRequestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transferStatusUsingGET
     * @param accountId 口座ID 半角数字 口座を識別するID  minLength: 12 maxLength: 29  (required)
     * @param queryKeyClass 照会対象キー区分 半角数字 照会対象のキー 1：振込申請照会対象指定、2：振込一括照会対象指定  minLength: 1 maxLength: 1  (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param applyNo 受付番号（振込申請番号） 半角数字 照会対象の番号を設定 照会対象キー区分が、1のときは必須 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）  minLength: 16 maxLength: 16  (optional)
     * @param dateFrom 対象期間From 半角文字 YYYY-MM-DD形式 照会対象キー区分が、2のときは入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 対象期間FROMと対象期間Toをどちらも指定する場合は、対象期間FROM≦対象期間TOとする それを超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param dateTo 対象期間To 半角文字 YYYY-MM-DD形式 照会対象キー区分が、2のときは入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 対象期間FROMと対象期間Toを指定する場合は、対象期間FROM≦対象期間TOとする　それを超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param nextItemKey 次明細キー 半角数字 照会対象キー区分が、2のときは入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）              minLength: 1 maxLength: 24  (optional)
     * @param requestTransferStatuses 振込一括照会対象ステータス 照会対象キー区分が、2のときは設定可 それ以外は設定しません（値が設定されている場合は、「400 Bad Request」を返却）  (optional)
     * @param requestTransferClass 振込照会対象取得区分 半角数字 1：ALL、2：振込申請のみ、3：振込受付情報のみ 照会対象キー区分が2かつ、法人かつ、ビジネスID管理申し込みの場合のときのみ入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 照会対象キー区分が、2のときに指定しない場合は1と扱います  minLength: 1 maxLength: 1  (optional)
     * @param requestTransferTerm 振込照会対象期間区分 半角数字 対象期間Fromと対象期間Toで指定する日付の区分 1：振込申請受付日　2：振込指定日 照会対象キー区分が2のときのみ入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 照会対象キー区分が、2のときに指定しない場合は1と扱います  minLength: 1 maxLength: 1  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferStatusUsingGETCall(String accountId, String queryKeyClass, String xAccessToken, String applyNo, String dateFrom, String dateTo, String nextItemKey, RequestTransferStatus requestTransferStatuses, String requestTransferClass, String requestTransferTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestTransferStatuses;

        // create path and map variables
        String localVarPath = "/transfer/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountId", accountId));
        if (queryKeyClass != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("queryKeyClass", queryKeyClass));
        if (applyNo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applyNo", applyNo));
        if (dateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateFrom", dateFrom));
        if (dateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateTo", dateTo));
        if (nextItemKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nextItemKey", nextItemKey));
        if (requestTransferClass != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("requestTransferClass", requestTransferClass));
        if (requestTransferTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("requestTransferTerm", requestTransferTerm));
        if (requestTransferStatuses != null && requestTransferStatuses.getRequestTransferStatus() != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("requestTransferStatus", requestTransferStatuses.getRequestTransferStatus()));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccessToken != null)
        localVarHeaderParams.put("x-access-token", apiClient.parameterToString(xAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferStatusUsingGETValidateBeforeCall(String accountId, String queryKeyClass, String xAccessToken, String applyNo, String dateFrom, String dateTo, String nextItemKey, RequestTransferStatus requestTransferStatuses, String requestTransferClass, String requestTransferTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { accountId, queryKeyClass, xAccessToken, applyNo, dateFrom, dateTo, nextItemKey, requestTransferStatuses, requestTransferClass, requestTransferTerm };
            Method method = this.getClass().getMethod("transferStatusUsingGETWithHttpInfo", String.class, String.class, String.class, String.class, String.class, String.class, String.class, RequestTransferStatus.class, String.class, String.class);
            Set<ConstraintViolation<TransferApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = transferStatusUsingGETCall(accountId, queryKeyClass, xAccessToken, applyNo, dateFrom, dateTo, nextItemKey, requestTransferStatuses, requestTransferClass, requestTransferTerm, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * 振込状況照会
     * 仕向の振込履歴情報を照会します 対象期間From、対象期間Toを設定しない場合、当日分の振込明細を返却します ■ソート順 振込照会対象期間区分の指定により下記となります 　1：振込申請受付日　　第1ソート：振込申請日昇順　　第２ソート：振込申請番号昇順 　2：振込指定日　　　　第1ソート：振込指定日昇順　　第２ソート：振込申請番号昇順 ■ページング ・1回のリクエストで照会できる明細は、最大500件です ・2ページ目以降を照会する際は、初回と同じリクエスト内容に、初回レスポンスの次明細キーを追加してリクエストしてください ■照会対象ステータス   ・申請中以降のステータスで照会が可能となります ・依頼中、作成中の状態は照会対象外です ■照会対象となる明細   ・振込・振替・およびその予約の履歴と状況が照会対象となります（APIからの依頼結果のみではありません） ・定額自動振込契約によって自動登録された振込は照会対象となります ・定額自動振込契約の申請状態と状況は対象外となります 
     * @param accountId 口座ID 半角数字 口座を識別するID  minLength: 12 maxLength: 29  (required)
     * @param queryKeyClass 照会対象キー区分 半角数字 照会対象のキー 1：振込申請照会対象指定、2：振込一括照会対象指定  minLength: 1 maxLength: 1  (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param applyNo 受付番号（振込申請番号） 半角数字 照会対象の番号を設定 照会対象キー区分が、1のときは必須 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）  minLength: 16 maxLength: 16  (optional)
     * @param dateFrom 対象期間From 半角文字 YYYY-MM-DD形式 照会対象キー区分が、2のときは入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 対象期間FROMと対象期間Toをどちらも指定する場合は、対象期間FROM≦対象期間TOとする それを超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param dateTo 対象期間To 半角文字 YYYY-MM-DD形式 照会対象キー区分が、2のときは入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 対象期間FROMと対象期間Toを指定する場合は、対象期間FROM≦対象期間TOとする　それを超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param nextItemKey 次明細キー 半角数字 照会対象キー区分が、2のときは入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）              minLength: 1 maxLength: 24  (optional)
     * @param requestTransferStatuses 振込一括照会対象ステータス 照会対象キー区分が、2のときは設定可 それ以外は設定しません（値が設定されている場合は、「400 Bad Request」を返却）  (optional)
     * @param requestTransferClass 振込照会対象取得区分 半角数字 1：ALL、2：振込申請のみ、3：振込受付情報のみ 照会対象キー区分が2かつ、法人かつ、ビジネスID管理申し込みの場合のときのみ入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 照会対象キー区分が、2のときに指定しない場合は1と扱います  minLength: 1 maxLength: 1  (optional)
     * @param requestTransferTerm 振込照会対象期間区分 半角数字 対象期間Fromと対象期間Toで指定する日付の区分 1：振込申請受付日　2：振込指定日 照会対象キー区分が2のときのみ入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 照会対象キー区分が、2のときに指定しない場合は1と扱います  minLength: 1 maxLength: 1  (optional)
     * @return TransferStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransferStatusResponse transferStatusUsingGET(String accountId, String queryKeyClass, String xAccessToken, String applyNo, String dateFrom, String dateTo, String nextItemKey, RequestTransferStatus requestTransferStatuses, String requestTransferClass, String requestTransferTerm) throws ApiException {
        ApiResponse<TransferStatusResponse> resp = transferStatusUsingGETWithHttpInfo(accountId, queryKeyClass, xAccessToken, applyNo, dateFrom, dateTo, nextItemKey, requestTransferStatuses, requestTransferClass, requestTransferTerm);
        return resp.getData();
    }

    /**
     * 振込状況照会
     * 仕向の振込履歴情報を照会します 対象期間From、対象期間Toを設定しない場合、当日分の振込明細を返却します ■ソート順 振込照会対象期間区分の指定により下記となります 　1：振込申請受付日　　第1ソート：振込申請日昇順　　第２ソート：振込申請番号昇順 　2：振込指定日　　　　第1ソート：振込指定日昇順　　第２ソート：振込申請番号昇順 ■ページング ・1回のリクエストで照会できる明細は、最大500件です ・2ページ目以降を照会する際は、初回と同じリクエスト内容に、初回レスポンスの次明細キーを追加してリクエストしてください ■照会対象ステータス   ・申請中以降のステータスで照会が可能となります ・依頼中、作成中の状態は照会対象外です ■照会対象となる明細   ・振込・振替・およびその予約の履歴と状況が照会対象となります（APIからの依頼結果のみではありません） ・定額自動振込契約によって自動登録された振込は照会対象となります ・定額自動振込契約の申請状態と状況は対象外となります 
     * @param accountId 口座ID 半角数字 口座を識別するID  minLength: 12 maxLength: 29  (required)
     * @param queryKeyClass 照会対象キー区分 半角数字 照会対象のキー 1：振込申請照会対象指定、2：振込一括照会対象指定  minLength: 1 maxLength: 1  (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param applyNo 受付番号（振込申請番号） 半角数字 照会対象の番号を設定 照会対象キー区分が、1のときは必須 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）  minLength: 16 maxLength: 16  (optional)
     * @param dateFrom 対象期間From 半角文字 YYYY-MM-DD形式 照会対象キー区分が、2のときは入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 対象期間FROMと対象期間Toをどちらも指定する場合は、対象期間FROM≦対象期間TOとする それを超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param dateTo 対象期間To 半角文字 YYYY-MM-DD形式 照会対象キー区分が、2のときは入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 対象期間FROMと対象期間Toを指定する場合は、対象期間FROM≦対象期間TOとする　それを超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param nextItemKey 次明細キー 半角数字 照会対象キー区分が、2のときは入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）              minLength: 1 maxLength: 24  (optional)
     * @param requestTransferStatuses 振込一括照会対象ステータス 照会対象キー区分が、2のときは設定可 それ以外は設定しません（値が設定されている場合は、「400 Bad Request」を返却）  (optional)
     * @param requestTransferClass 振込照会対象取得区分 半角数字 1：ALL、2：振込申請のみ、3：振込受付情報のみ 照会対象キー区分が2かつ、法人かつ、ビジネスID管理申し込みの場合のときのみ入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 照会対象キー区分が、2のときに指定しない場合は1と扱います  minLength: 1 maxLength: 1  (optional)
     * @param requestTransferTerm 振込照会対象期間区分 半角数字 対象期間Fromと対象期間Toで指定する日付の区分 1：振込申請受付日　2：振込指定日 照会対象キー区分が2のときのみ入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 照会対象キー区分が、2のときに指定しない場合は1と扱います  minLength: 1 maxLength: 1  (optional)
     * @return ApiResponse&lt;TransferStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransferStatusResponse> transferStatusUsingGETWithHttpInfo(String accountId, String queryKeyClass, String xAccessToken, String applyNo, String dateFrom, String dateTo, String nextItemKey, RequestTransferStatus requestTransferStatuses, String requestTransferClass, String requestTransferTerm) throws ApiException {
        com.squareup.okhttp.Call call = transferStatusUsingGETValidateBeforeCall(accountId, queryKeyClass, xAccessToken, applyNo, dateFrom, dateTo, nextItemKey, requestTransferStatuses, requestTransferClass, requestTransferTerm, null, null);
        Type localVarReturnType = new TypeToken<TransferStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 振込状況照会 (asynchronously)
     * 仕向の振込履歴情報を照会します 対象期間From、対象期間Toを設定しない場合、当日分の振込明細を返却します ■ソート順 振込照会対象期間区分の指定により下記となります 　1：振込申請受付日　　第1ソート：振込申請日昇順　　第２ソート：振込申請番号昇順 　2：振込指定日　　　　第1ソート：振込指定日昇順　　第２ソート：振込申請番号昇順 ■ページング ・1回のリクエストで照会できる明細は、最大500件です ・2ページ目以降を照会する際は、初回と同じリクエスト内容に、初回レスポンスの次明細キーを追加してリクエストしてください ■照会対象ステータス   ・申請中以降のステータスで照会が可能となります ・依頼中、作成中の状態は照会対象外です ■照会対象となる明細   ・振込・振替・およびその予約の履歴と状況が照会対象となります（APIからの依頼結果のみではありません） ・定額自動振込契約によって自動登録された振込は照会対象となります ・定額自動振込契約の申請状態と状況は対象外となります 
     * @param accountId 口座ID 半角数字 口座を識別するID  minLength: 12 maxLength: 29  (required)
     * @param queryKeyClass 照会対象キー区分 半角数字 照会対象のキー 1：振込申請照会対象指定、2：振込一括照会対象指定  minLength: 1 maxLength: 1  (required)
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param applyNo 受付番号（振込申請番号） 半角数字 照会対象の番号を設定 照会対象キー区分が、1のときは必須 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）  minLength: 16 maxLength: 16  (optional)
     * @param dateFrom 対象期間From 半角文字 YYYY-MM-DD形式 照会対象キー区分が、2のときは入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 対象期間FROMと対象期間Toをどちらも指定する場合は、対象期間FROM≦対象期間TOとする それを超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param dateTo 対象期間To 半角文字 YYYY-MM-DD形式 照会対象キー区分が、2のときは入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 対象期間FROMと対象期間Toを指定する場合は、対象期間FROM≦対象期間TOとする　それを超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param nextItemKey 次明細キー 半角数字 照会対象キー区分が、2のときは入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）              minLength: 1 maxLength: 24  (optional)
     * @param requestTransferStatuses 振込一括照会対象ステータス 照会対象キー区分が、2のときは設定可 それ以外は設定しません（値が設定されている場合は、「400 Bad Request」を返却）  (optional)
     * @param requestTransferClass 振込照会対象取得区分 半角数字 1：ALL、2：振込申請のみ、3：振込受付情報のみ 照会対象キー区分が2かつ、法人かつ、ビジネスID管理申し込みの場合のときのみ入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 照会対象キー区分が、2のときに指定しない場合は1と扱います  minLength: 1 maxLength: 1  (optional)
     * @param requestTransferTerm 振込照会対象期間区分 半角数字 対象期間Fromと対象期間Toで指定する日付の区分 1：振込申請受付日　2：振込指定日 照会対象キー区分が2のときのみ入力可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 照会対象キー区分が、2のときに指定しない場合は1と扱います  minLength: 1 maxLength: 1  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferStatusUsingGETAsync(String accountId, String queryKeyClass, String xAccessToken, String applyNo, String dateFrom, String dateTo, String nextItemKey, RequestTransferStatus requestTransferStatuses, String requestTransferClass, String requestTransferTerm, final ApiCallback<TransferStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferStatusUsingGETValidateBeforeCall(accountId, queryKeyClass, xAccessToken, applyNo, dateFrom, dateTo, nextItemKey, requestTransferStatuses, requestTransferClass, requestTransferTerm, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransferStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
