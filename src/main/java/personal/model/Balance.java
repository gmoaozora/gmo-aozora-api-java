/*
 * GMO Aozora Net Bank Open API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package personal.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import java.util.Objects;

/**
 * Balance
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-12-18T06:43:57.831Z")
public class Balance {
  @SerializedName("accountId")
  private String accountId = null;

  @SerializedName("accountTypeCode")
  private String accountTypeCode = null;

  @SerializedName("accountTypeName")
  private String accountTypeName = null;

  @SerializedName("balance")
  private String balance = null;

  @SerializedName("baseDate")
  private String baseDate = null;

  @SerializedName("baseTime")
  private String baseTime = null;

  @SerializedName("withdrawableAmount")
  private String withdrawableAmount = null;

  @SerializedName("previousDayBalance")
  private String previousDayBalance = null;

  @SerializedName("previousMonthBalance")
  private String previousMonthBalance = null;

  @SerializedName("currencyCode")
  private String currencyCode = null;

  @SerializedName("currencyName")
  private String currencyName = null;

  @SerializedName("fcyTotalBalance")
  private String fcyTotalBalance = null;

  @SerializedName("ttb")
  private String ttb = null;

  @SerializedName("baseRateDate")
  private String baseRateDate = null;

  @SerializedName("baseRateTime")
  private String baseRateTime = null;

  @SerializedName("yenEquivalent")
  private String yenEquivalent = null;

  public Balance accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * 口座ID 半角英数字 口座を識別するID 
   * @return accountId
  **/
  @ApiModelProperty(example = "101011234567", required = true, value = "口座ID 半角英数字 口座を識別するID ")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public Balance accountTypeCode(String accountTypeCode) {
    this.accountTypeCode = accountTypeCode;
    return this;
  }

   /**
   * 科目コード 半角数字 ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用） ・11&#x3D;円定期預金 ・51&#x3D;外貨普通預金 ・81&#x3D;証券コネクト口座 
   * @return accountTypeCode
  **/
  @ApiModelProperty(example = "01", required = true, value = "科目コード 半角数字 ・01=普通預金（有利息） ・02=普通預金（決済用） ・11=円定期預金 ・51=外貨普通預金 ・81=証券コネクト口座 ")
  public String getAccountTypeCode() {
    return accountTypeCode;
  }

  public void setAccountTypeCode(String accountTypeCode) {
    this.accountTypeCode = accountTypeCode;
  }

  public Balance accountTypeName(String accountTypeName) {
    this.accountTypeName = accountTypeName;
    return this;
  }

   /**
   * 科目名 全角文字 科目コードの名称 
   * @return accountTypeName
  **/
  @ApiModelProperty(example = "普通預金（有利息）", required = true, value = "科目名 全角文字 科目コードの名称 ")
  public String getAccountTypeName() {
    return accountTypeName;
  }

  public void setAccountTypeName(String accountTypeName) {
    this.accountTypeName = accountTypeName;
  }

  public Balance balance(String balance) {
    this.balance = balance;
    return this;
  }

   /**
   * 現在残高 半角数字　マイナス含む 基準日時における現在残高 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用） ・11&#x3D;円定期預金 ・81&#x3D;証券コネクト口座 
   * @return balance
  **/
  @ApiModelProperty(example = "50000000", value = "現在残高 半角数字　マイナス含む 基準日時における現在残高 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01=普通預金（有利息） ・02=普通預金（決済用） ・11=円定期預金 ・81=証券コネクト口座 ")
  public String getBalance() {
    return balance;
  }

  public void setBalance(String balance) {
    this.balance = balance;
  }

  public Balance baseDate(String baseDate) {
    this.baseDate = baseDate;
    return this;
  }

   /**
   * 基準日 半角文字 残高および引出可能額を照会した基準日を示します YYYY-MM-DD形式 
   * @return baseDate
  **/
  @ApiModelProperty(example = "2018-08-10", required = true, value = "基準日 半角文字 残高および引出可能額を照会した基準日を示します YYYY-MM-DD形式 ")
  public String getBaseDate() {
    return baseDate;
  }

  public void setBaseDate(String baseDate) {
    this.baseDate = baseDate;
  }

  public Balance baseTime(String baseTime) {
    this.baseTime = baseTime;
    return this;
  }

   /**
   * 基準時刻 半角文字 残高および引出可能額を照会した基準時刻を示します HH:MM:SS+09:00形式 
   * @return baseTime
  **/
  @ApiModelProperty(example = "10:00:00+09:00", required = true, value = "基準時刻 半角文字 残高および引出可能額を照会した基準時刻を示します HH:MM:SS+09:00形式 ")
  public String getBaseTime() {
    return baseTime;
  }

  public void setBaseTime(String baseTime) {
    this.baseTime = baseTime;
  }

  public Balance withdrawableAmount(String withdrawableAmount) {
    this.withdrawableAmount = withdrawableAmount;
    return this;
  }

   /**
   * 支払可能残高 半角数字　マイナス含む 応答時点での引出可能額を示します 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用） 
   * @return withdrawableAmount
  **/
  @ApiModelProperty(example = "50000000", value = "支払可能残高 半角数字　マイナス含む 応答時点での引出可能額を示します 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01=普通預金（有利息） ・02=普通預金（決済用） ")
  public String getWithdrawableAmount() {
    return withdrawableAmount;
  }

  public void setWithdrawableAmount(String withdrawableAmount) {
    this.withdrawableAmount = withdrawableAmount;
  }

  public Balance previousDayBalance(String previousDayBalance) {
    this.previousDayBalance = previousDayBalance;
    return this;
  }

   /**
   * 前日残高 半角数字　マイナス含む 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用） 
   * @return previousDayBalance
  **/
  @ApiModelProperty(example = "49500000", value = "前日残高 半角数字　マイナス含む 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01=普通預金（有利息） ・02=普通預金（決済用） ")
  public String getPreviousDayBalance() {
    return previousDayBalance;
  }

  public void setPreviousDayBalance(String previousDayBalance) {
    this.previousDayBalance = previousDayBalance;
  }

  public Balance previousMonthBalance(String previousMonthBalance) {
    this.previousMonthBalance = previousMonthBalance;
    return this;
  }

   /**
   * 前月末残高 半角数字　マイナス含む 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用） 
   * @return previousMonthBalance
  **/
  @ApiModelProperty(example = "45000000", value = "前月末残高 半角数字　マイナス含む 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01=普通預金（有利息） ・02=普通預金（決済用） ")
  public String getPreviousMonthBalance() {
    return previousMonthBalance;
  }

  public void setPreviousMonthBalance(String previousMonthBalance) {
    this.previousMonthBalance = previousMonthBalance;
  }

  public Balance currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * 通貨コード 半角文字 ISO4217に準拠した通貨コード 
   * @return currencyCode
  **/
  @ApiModelProperty(example = "JPY", required = true, value = "通貨コード 半角文字 ISO4217に準拠した通貨コード ")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public Balance currencyName(String currencyName) {
    this.currencyName = currencyName;
    return this;
  }

   /**
   * 通貨名 全角文字 ISO4217に準拠した通貨コードの当行での名称 
   * @return currencyName
  **/
  @ApiModelProperty(example = "日本円", required = true, value = "通貨名 全角文字 ISO4217に準拠した通貨コードの当行での名称 ")
  public String getCurrencyName() {
    return currencyName;
  }

  public void setCurrencyName(String currencyName) {
    this.currencyName = currencyName;
  }

  public Balance fcyTotalBalance(String fcyTotalBalance) {
    this.fcyTotalBalance = fcyTotalBalance;
    return this;
  }

   /**
   * 外貨残高 半角数字　少数点および小数部最大3桁　マイナス含む 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・51&#x3D;外貨普通預金 
   * @return fcyTotalBalance
  **/
  @ApiModelProperty(example = "350.48", value = "外貨残高 半角数字　少数点および小数部最大3桁　マイナス含む 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・51=外貨普通預金 ")
  public String getFcyTotalBalance() {
    return fcyTotalBalance;
  }

  public void setFcyTotalBalance(String fcyTotalBalance) {
    this.fcyTotalBalance = fcyTotalBalance;
  }

  public Balance ttb(String ttb) {
    this.ttb = ttb;
    return this;
  }

   /**
   * 外貨レート 半角数字　少数点および小数部最大3桁　マイナス含む 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・51&#x3D;外貨普通預金 
   * @return ttb
  **/
  @ApiModelProperty(example = "110.5", value = "外貨レート 半角数字　少数点および小数部最大3桁　マイナス含む 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・51=外貨普通預金 ")
  public String getTtb() {
    return ttb;
  }

  public void setTtb(String ttb) {
    this.ttb = ttb;
  }

  public Balance baseRateDate(String baseRateDate) {
    this.baseRateDate = baseRateDate;
    return this;
  }

   /**
   * 外貨レート基準日 半角文字 外貨レートの基準日を示します YYYY-MM-DD形式 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・51&#x3D;外貨普通預金 
   * @return baseRateDate
  **/
  @ApiModelProperty(example = "2018-08-10", value = "外貨レート基準日 半角文字 外貨レートの基準日を示します YYYY-MM-DD形式 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・51=外貨普通預金 ")
  public String getBaseRateDate() {
    return baseRateDate;
  }

  public void setBaseRateDate(String baseRateDate) {
    this.baseRateDate = baseRateDate;
  }

  public Balance baseRateTime(String baseRateTime) {
    this.baseRateTime = baseRateTime;
    return this;
  }

   /**
   * 外貨レート基準時刻 半角文字 外貨レートの基準時刻を示します HH:MM:SS+09:00形式 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・51&#x3D;外貨普通預金 
   * @return baseRateTime
  **/
  @ApiModelProperty(example = "10:00:00+09:00", value = "外貨レート基準時刻 半角文字 外貨レートの基準時刻を示します HH:MM:SS+09:00形式 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・51=外貨普通預金 ")
  public String getBaseRateTime() {
    return baseRateTime;
  }

  public void setBaseRateTime(String baseRateTime) {
    this.baseRateTime = baseRateTime;
  }

  public Balance yenEquivalent(String yenEquivalent) {
    this.yenEquivalent = yenEquivalent;
    return this;
  }

   /**
   * 外貨円換算額 半角数字　マイナス含む 外貨残高を円に換算した額 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・51&#x3D;外貨普通預金 
   * @return yenEquivalent
  **/
  @ApiModelProperty(example = "38728", value = "外貨円換算額 半角数字　マイナス含む 外貨残高を円に換算した額 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・51=外貨普通預金 ")
  public String getYenEquivalent() {
    return yenEquivalent;
  }

  public void setYenEquivalent(String yenEquivalent) {
    this.yenEquivalent = yenEquivalent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Balance balance = (Balance) o;
    return Objects.equals(this.accountId, balance.accountId) &&
        Objects.equals(this.accountTypeCode, balance.accountTypeCode) &&
        Objects.equals(this.accountTypeName, balance.accountTypeName) &&
        Objects.equals(this.balance, balance.balance) &&
        Objects.equals(this.baseDate, balance.baseDate) &&
        Objects.equals(this.baseTime, balance.baseTime) &&
        Objects.equals(this.withdrawableAmount, balance.withdrawableAmount) &&
        Objects.equals(this.previousDayBalance, balance.previousDayBalance) &&
        Objects.equals(this.previousMonthBalance, balance.previousMonthBalance) &&
        Objects.equals(this.currencyCode, balance.currencyCode) &&
        Objects.equals(this.currencyName, balance.currencyName) &&
        Objects.equals(this.fcyTotalBalance, balance.fcyTotalBalance) &&
        Objects.equals(this.ttb, balance.ttb) &&
        Objects.equals(this.baseRateDate, balance.baseRateDate) &&
        Objects.equals(this.baseRateTime, balance.baseRateTime) &&
        Objects.equals(this.yenEquivalent, balance.yenEquivalent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, accountTypeCode, accountTypeName, balance, baseDate, baseTime, withdrawableAmount, previousDayBalance, previousMonthBalance, currencyCode, currencyName, fcyTotalBalance, ttb, baseRateDate, baseRateTime, yenEquivalent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Balance {\n");
    
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    accountTypeCode: ").append(toIndentedString(accountTypeCode)).append("\n");
    sb.append("    accountTypeName: ").append(toIndentedString(accountTypeName)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    baseDate: ").append(toIndentedString(baseDate)).append("\n");
    sb.append("    baseTime: ").append(toIndentedString(baseTime)).append("\n");
    sb.append("    withdrawableAmount: ").append(toIndentedString(withdrawableAmount)).append("\n");
    sb.append("    previousDayBalance: ").append(toIndentedString(previousDayBalance)).append("\n");
    sb.append("    previousMonthBalance: ").append(toIndentedString(previousMonthBalance)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currencyName: ").append(toIndentedString(currencyName)).append("\n");
    sb.append("    fcyTotalBalance: ").append(toIndentedString(fcyTotalBalance)).append("\n");
    sb.append("    ttb: ").append(toIndentedString(ttb)).append("\n");
    sb.append("    baseRateDate: ").append(toIndentedString(baseRateDate)).append("\n");
    sb.append("    baseRateTime: ").append(toIndentedString(baseRateTime)).append("\n");
    sb.append("    yenEquivalent: ").append(toIndentedString(yenEquivalent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

