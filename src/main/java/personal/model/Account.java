/*
 * GMO Aozora Net Bank Open API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package personal.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import java.util.Objects;

/**
 * Account
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-12-18T06:43:57.831Z")
public class Account {
  @SerializedName("accountId")
  private String accountId = null;

  @SerializedName("branchCode")
  private String branchCode = null;

  @SerializedName("branchName")
  private String branchName = null;

  @SerializedName("accountTypeCode")
  private String accountTypeCode = null;

  @SerializedName("accountTypeName")
  private String accountTypeName = null;

  @SerializedName("accountNumber")
  private String accountNumber = null;

  @SerializedName("primaryAccountCode")
  private String primaryAccountCode = null;

  @SerializedName("primaryAccountCodeName")
  private String primaryAccountCodeName = null;

  @SerializedName("accountName")
  private String accountName = null;

  @SerializedName("accountNameKana")
  private String accountNameKana = null;

  @SerializedName("currencyCode")
  private String currencyCode = null;

  @SerializedName("currencyName")
  private String currencyName = null;

  @SerializedName("transferLimitAmount")
  private String transferLimitAmount = null;

  public Account accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * 口座ID 半角英数字 口座を識別するID 
   * @return accountId
  **/
  @ApiModelProperty(example = "101011234567", required = true, value = "口座ID 半角英数字 口座を識別するID ")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public Account branchCode(String branchCode) {
    this.branchCode = branchCode;
    return this;
  }

   /**
   * 支店コード 半角数字 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用） 
   * @return branchCode
  **/
  @ApiModelProperty(example = "101", value = "支店コード 半角数字 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01=普通預金（有利息） ・02=普通預金（決済用） ")
  public String getBranchCode() {
    return branchCode;
  }

  public void setBranchCode(String branchCode) {
    this.branchCode = branchCode;
  }

  public Account branchName(String branchName) {
    this.branchName = branchName;
    return this;
  }

   /**
   * 支店名 全角文字 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用） 
   * @return branchName
  **/
  @ApiModelProperty(example = "法人営業部", value = "支店名 全角文字 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01=普通預金（有利息） ・02=普通預金（決済用） ")
  public String getBranchName() {
    return branchName;
  }

  public void setBranchName(String branchName) {
    this.branchName = branchName;
  }

  public Account accountTypeCode(String accountTypeCode) {
    this.accountTypeCode = accountTypeCode;
    return this;
  }

   /**
   * 科目コード 半角数字 ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用） ・11&#x3D;円定期預金 ・51&#x3D;外貨普通預金 ・81&#x3D;証券コネクト口座 
   * @return accountTypeCode
  **/
  @ApiModelProperty(example = "01", required = true, value = "科目コード 半角数字 ・01=普通預金（有利息） ・02=普通預金（決済用） ・11=円定期預金 ・51=外貨普通預金 ・81=証券コネクト口座 ")
  public String getAccountTypeCode() {
    return accountTypeCode;
  }

  public void setAccountTypeCode(String accountTypeCode) {
    this.accountTypeCode = accountTypeCode;
  }

  public Account accountTypeName(String accountTypeName) {
    this.accountTypeName = accountTypeName;
    return this;
  }

   /**
   * 科目名 全角文字 科目コードの名称 
   * @return accountTypeName
  **/
  @ApiModelProperty(example = "普通預金（有利息）", required = true, value = "科目名 全角文字 科目コードの名称 ")
  public String getAccountTypeName() {
    return accountTypeName;
  }

  public void setAccountTypeName(String accountTypeName) {
    this.accountTypeName = accountTypeName;
  }

  public Account accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * 口座番号 半角数字 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用） 
   * @return accountNumber
  **/
  @ApiModelProperty(example = "1234567", value = "口座番号 半角数字 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01=普通預金（有利息） ・02=普通預金（決済用） ")
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }

  public Account primaryAccountCode(String primaryAccountCode) {
    this.primaryAccountCode = primaryAccountCode;
    return this;
  }

   /**
   * 代表口座コード ・1&#x3D;代表口座 ・2&#x3D;追加口座 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用） 
   * @return primaryAccountCode
  **/
  @ApiModelProperty(example = "1", value = "代表口座コード ・1=代表口座 ・2=追加口座 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01=普通預金（有利息） ・02=普通預金（決済用） ")
  public String getPrimaryAccountCode() {
    return primaryAccountCode;
  }

  public void setPrimaryAccountCode(String primaryAccountCode) {
    this.primaryAccountCode = primaryAccountCode;
  }

  public Account primaryAccountCodeName(String primaryAccountCodeName) {
    this.primaryAccountCodeName = primaryAccountCodeName;
    return this;
  }

   /**
   * 代表口座コードの名称 全角文字 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用） 
   * @return primaryAccountCodeName
  **/
  @ApiModelProperty(example = "代表口座", value = "代表口座コードの名称 全角文字 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01=普通預金（有利息） ・02=普通預金（決済用） ")
  public String getPrimaryAccountCodeName() {
    return primaryAccountCodeName;
  }

  public void setPrimaryAccountCodeName(String primaryAccountCodeName) {
    this.primaryAccountCodeName = primaryAccountCodeName;
  }

  public Account accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

   /**
   * 口座名義 全角文字 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用） 
   * @return accountName
  **/
  @ApiModelProperty(example = "ＧＭＯあおぞら株式会社", value = "口座名義 全角文字 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01=普通預金（有利息） ・02=普通預金（決済用） ")
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }

  public Account accountNameKana(String accountNameKana) {
    this.accountNameKana = accountNameKana;
    return this;
  }

   /**
   * 口座名義カナ 半角文字 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用） 
   * @return accountNameKana
  **/
  @ApiModelProperty(example = "ｼﾞｰｴﾑｵｰｱｵｿﾞﾗｶﾌﾞｼｷｶﾞｲｼﾔ", value = "口座名義カナ 半角文字 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01=普通預金（有利息） ・02=普通預金（決済用） ")
  public String getAccountNameKana() {
    return accountNameKana;
  }

  public void setAccountNameKana(String accountNameKana) {
    this.accountNameKana = accountNameKana;
  }

  public Account currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * 通貨コード 半角文字 ISO4217に準拠した通貨コード 
   * @return currencyCode
  **/
  @ApiModelProperty(example = "JPY", required = true, value = "通貨コード 半角文字 ISO4217に準拠した通貨コード ")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public Account currencyName(String currencyName) {
    this.currencyName = currencyName;
    return this;
  }

   /**
   * 通貨名 全角文字 ISO4217に準拠した通貨コードの当行での名称 
   * @return currencyName
  **/
  @ApiModelProperty(example = "日本円", required = true, value = "通貨名 全角文字 ISO4217に準拠した通貨コードの当行での名称 ")
  public String getCurrencyName() {
    return currencyName;
  }

  public void setCurrencyName(String currencyName) {
    this.currencyName = currencyName;
  }

  public Account transferLimitAmount(String transferLimitAmount) {
    this.transferLimitAmount = transferLimitAmount;
    return this;
  }

   /**
   * 振込限度額 半角数字 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用） 
   * @return transferLimitAmount
  **/
  @ApiModelProperty(example = "5000000", value = "振込限度額 半角数字 科目コードが以下の場合のみ設定されます。　該当しない場合はNULL ・01=普通預金（有利息） ・02=普通預金（決済用） ")
  public String getTransferLimitAmount() {
    return transferLimitAmount;
  }

  public void setTransferLimitAmount(String transferLimitAmount) {
    this.transferLimitAmount = transferLimitAmount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.accountId, account.accountId) &&
        Objects.equals(this.branchCode, account.branchCode) &&
        Objects.equals(this.branchName, account.branchName) &&
        Objects.equals(this.accountTypeCode, account.accountTypeCode) &&
        Objects.equals(this.accountTypeName, account.accountTypeName) &&
        Objects.equals(this.accountNumber, account.accountNumber) &&
        Objects.equals(this.primaryAccountCode, account.primaryAccountCode) &&
        Objects.equals(this.primaryAccountCodeName, account.primaryAccountCodeName) &&
        Objects.equals(this.accountName, account.accountName) &&
        Objects.equals(this.accountNameKana, account.accountNameKana) &&
        Objects.equals(this.currencyCode, account.currencyCode) &&
        Objects.equals(this.currencyName, account.currencyName) &&
        Objects.equals(this.transferLimitAmount, account.transferLimitAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, branchCode, branchName, accountTypeCode, accountTypeName, accountNumber, primaryAccountCode, primaryAccountCodeName, accountName, accountNameKana, currencyCode, currencyName, transferLimitAmount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    branchCode: ").append(toIndentedString(branchCode)).append("\n");
    sb.append("    branchName: ").append(toIndentedString(branchName)).append("\n");
    sb.append("    accountTypeCode: ").append(toIndentedString(accountTypeCode)).append("\n");
    sb.append("    accountTypeName: ").append(toIndentedString(accountTypeName)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    primaryAccountCode: ").append(toIndentedString(primaryAccountCode)).append("\n");
    sb.append("    primaryAccountCodeName: ").append(toIndentedString(primaryAccountCodeName)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountNameKana: ").append(toIndentedString(accountNameKana)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currencyName: ").append(toIndentedString(currencyName)).append("\n");
    sb.append("    transferLimitAmount: ").append(toIndentedString(transferLimitAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

