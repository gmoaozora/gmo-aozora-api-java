/*
 * GMO Aozora Net Bank Open API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package personal.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * BulkTransferResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-12-18T06:43:57.831Z")
public class BulkTransferResponse {
  @SerializedName("accountId")
  private String accountId = null;

  @SerializedName("remitterName")
  private String remitterName = null;

  @SerializedName("transferDesignatedDate")
  private String transferDesignatedDate = null;

  @SerializedName("transferDataName")
  private String transferDataName = null;

  @SerializedName("totalCount")
  private String totalCount = null;

  @SerializedName("totalAmount")
  private String totalAmount = null;

  @SerializedName("bulkTransferInfos")
  private List<BulkTransferInfo> bulkTransferInfos = null;

  public BulkTransferResponse accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * 口座ID 半角英数字 口座を識別するID 
   * @return accountId
  **/
  @ApiModelProperty(example = "101011234567", value = "口座ID 半角英数字 口座を識別するID ")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public BulkTransferResponse remitterName(String remitterName) {
    this.remitterName = remitterName;
    return this;
  }

   /**
   * 振込依頼人名 半角文字 
   * @return remitterName
  **/
  @ApiModelProperty(example = "ｱｵｿﾞﾗｼﾖｳｼﾞ(ｶ", value = "振込依頼人名 半角文字 ")
  public String getRemitterName() {
    return remitterName;
  }

  public void setRemitterName(String remitterName) {
    this.remitterName = remitterName;
  }

  public BulkTransferResponse transferDesignatedDate(String transferDesignatedDate) {
    this.transferDesignatedDate = transferDesignatedDate;
    return this;
  }

   /**
   * 振込指定日 半角文字 YYYY-MM-DD形式 
   * @return transferDesignatedDate
  **/
  @ApiModelProperty(example = "2018-07-30", value = "振込指定日 半角文字 YYYY-MM-DD形式 ")
  public String getTransferDesignatedDate() {
    return transferDesignatedDate;
  }

  public void setTransferDesignatedDate(String transferDesignatedDate) {
    this.transferDesignatedDate = transferDesignatedDate;
  }

  public BulkTransferResponse transferDataName(String transferDataName) {
    this.transferDataName = transferDataName;
    return this;
  }

   /**
   * 振込データ名 全半角文字 作成した総合振込のデータを区別するためのメモ 
   * @return transferDataName
  **/
  @ApiModelProperty(example = "６月分請求", value = "振込データ名 全半角文字 作成した総合振込のデータを区別するためのメモ ")
  public String getTransferDataName() {
    return transferDataName;
  }

  public void setTransferDataName(String transferDataName) {
    this.transferDataName = transferDataName;
  }

  public BulkTransferResponse totalCount(String totalCount) {
    this.totalCount = totalCount;
    return this;
  }

   /**
   * 合計件数 半角数字 
   * @return totalCount
  **/
  @ApiModelProperty(example = "5", value = "合計件数 半角数字 ")
  public String getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(String totalCount) {
    this.totalCount = totalCount;
  }

  public BulkTransferResponse totalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

   /**
   * 合計金額 半角数字 
   * @return totalAmount
  **/
  @ApiModelProperty(example = "1234500", value = "合計金額 半角数字 ")
  public String getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
  }

  public BulkTransferResponse bulkTransferInfos(List<BulkTransferInfo> bulkTransferInfos) {
    this.bulkTransferInfos = bulkTransferInfos;
    return this;
  }

  public BulkTransferResponse addBulkTransferInfosItem(BulkTransferInfo bulkTransferInfosItem) {
    if (this.bulkTransferInfos == null) {
      this.bulkTransferInfos = new ArrayList<>();
    }
    this.bulkTransferInfos.add(bulkTransferInfosItem);
    return this;
  }

   /**
   * 総合振込明細情報 総合振込明細のリスト 明細情報取得フラグが「True：取得する」のときのみ設定します それ以外は項目自体を設定しません 
   * @return bulkTransferInfos
  **/
  @ApiModelProperty(value = "総合振込明細情報 総合振込明細のリスト 明細情報取得フラグが「True：取得する」のときのみ設定します それ以外は項目自体を設定しません ")
  public List<BulkTransferInfo> getBulkTransferInfos() {
    return bulkTransferInfos;
  }

  public void setBulkTransferInfos(List<BulkTransferInfo> bulkTransferInfos) {
    this.bulkTransferInfos = bulkTransferInfos;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkTransferResponse bulkTransferResponse = (BulkTransferResponse) o;
    return Objects.equals(this.accountId, bulkTransferResponse.accountId) &&
        Objects.equals(this.remitterName, bulkTransferResponse.remitterName) &&
        Objects.equals(this.transferDesignatedDate, bulkTransferResponse.transferDesignatedDate) &&
        Objects.equals(this.transferDataName, bulkTransferResponse.transferDataName) &&
        Objects.equals(this.totalCount, bulkTransferResponse.totalCount) &&
        Objects.equals(this.totalAmount, bulkTransferResponse.totalAmount) &&
        Objects.equals(this.bulkTransferInfos, bulkTransferResponse.bulkTransferInfos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, remitterName, transferDesignatedDate, transferDataName, totalCount, totalAmount, bulkTransferInfos);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkTransferResponse {\n");
    
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    remitterName: ").append(toIndentedString(remitterName)).append("\n");
    sb.append("    transferDesignatedDate: ").append(toIndentedString(transferDesignatedDate)).append("\n");
    sb.append("    transferDataName: ").append(toIndentedString(transferDataName)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    bulkTransferInfos: ").append(toIndentedString(bulkTransferInfos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

