/*
 * GMO Aozora Net Bank Open API
 * <p>Ph2.5向けに作成したもの</p> 
 *
 * OpenAPI spec version: 1.1.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package webhook;

import com.google.gson.reflect.TypeToken;
import common.ApiCallback;
import common.ApiClient;
import common.ApiException;
import common.ApiResponse;
import common.BeanValidationException;
import common.Configuration;
import common.Pair;
import common.ProgressRequestBody;
import common.ProgressResponseBody;
import java.io.IOException;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.ValidatorFactory;
import javax.validation.executable.ExecutableValidator;
import webhook.model.SubscribeRequestBody;
import webhook.model.VaDepositTransactionUnsentResponse;

public class WebhookApi {
    private ApiClient apiClient;

    public WebhookApi() {
        this(Configuration.getWebhookApiClient());
    }

    public WebhookApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for accountsUsing
     * @param authorization 認証情報 銀行システムが配信先システムに発行した、クライアントIDとクライアントシーレットを\&quot;:\&quot;（コロン）で連結し、Base64エンコードした値を設定 minLength: ‐ maxLength: ‐  (required)
     * @param body HTTPリクエストボディ (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountsUsingCall(String authorization, SubscribeRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountsUsingValidateBeforeCall(String authorization, SubscribeRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { authorization, body };
            Method method = this.getClass().getMethod("accountsUsingWithHttpInfo", String.class, SubscribeRequestBody.class);
            Set<ConstraintViolation<WebhookApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = accountsUsingCall(authorization, body, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * 通知配信制御
     * 指定したイベント通知に対応するイベント通知（WebHook）の配信開始、配信停止をコントロールします
     * @param authorization 認証情報 銀行システムが配信先システムに発行した、クライアントIDとクライアントシーレットを\&quot;:\&quot;（コロン）で連結し、Base64エンコードした値を設定 minLength: ‐ maxLength: ‐  (required)
     * @param body HTTPリクエストボディ (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void accountsUsing(String authorization, SubscribeRequestBody body) throws ApiException {
        accountsUsingWithHttpInfo(authorization, body);
    }

    /**
     * 通知配信制御
     * 指定したイベント通知に対応するイベント通知（WebHook）の配信開始、配信停止をコントロールします
     * @param authorization 認証情報 銀行システムが配信先システムに発行した、クライアントIDとクライアントシーレットを\&quot;:\&quot;（コロン）で連結し、Base64エンコードした値を設定 minLength: ‐ maxLength: ‐  (required)
     * @param body HTTPリクエストボディ (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> accountsUsingWithHttpInfo(String authorization, SubscribeRequestBody body) throws ApiException {
        com.squareup.okhttp.Call call = accountsUsingValidateBeforeCall(authorization, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * 通知配信制御 (asynchronously)
     * 指定したイベント通知に対応するイベント通知（WebHook）の配信開始、配信停止をコントロールします
     * @param authorization 認証情報 銀行システムが配信先システムに発行した、クライアントIDとクライアントシーレットを\&quot;:\&quot;（コロン）で連結し、Base64エンコードした値を設定 minLength: ‐ maxLength: ‐  (required)
     * @param body HTTPリクエストボディ (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountsUsingAsync(String authorization, SubscribeRequestBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountsUsingValidateBeforeCall(authorization, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for accountsUsingGET
     * @param authorization 認証情報 銀行システムが配信先システムに発行した、クライアントIDとクライアントシーレットを\&quot;:\&quot;（コロン）で連結し、Base64エンコードした値を設定 minLength: ‐ maxLength: ‐  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountsUsingGETCall(String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unsentlist/va-deposit-transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountsUsingGETValidateBeforeCall(String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { authorization };
            Method method = this.getClass().getMethod("accountsUsingGETWithHttpInfo", String.class);
            Set<ConstraintViolation<WebhookApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = accountsUsingGETCall(authorization, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * 振込入金口座未送信明細取得
     * 配信停止状態となっている場合、本APIを利用することで未送信または送信エラーとなっている、振込入金口座の入金明細を一括で取得することができます 通常、未送信または送信エラーとなっている明細は配信再開後に通知されますが、本APIで取得された明細は配信済みとなるため、配信再開後には通知されません 未送信または送信エラーとなっている明細が無い場合は404 Not Foundを返却します &lt;p&gt;&lt;font color&#x3D;\&quot;red\&quot;&gt;※法人口座および個人事業主口座のみ対象となり、個人口座は対象外となります&lt;/font&gt;&lt;/p&gt; &lt;h4 style&#x3D;&#39;margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;&#39;&gt;詳細説明&lt;/h4&gt; &lt;div style&#x3D;&#39;margin:10px;&#39;&gt;   &lt;p style&#x3D;&#39;font-weight:bold; color:#616161;&#39;&gt;取得上限件数&lt;/p&gt;   &lt;p style&#x3D;&#39;padding-left:20px;&#39;&gt;500件&lt;/p&gt;   &lt;p style&#x3D;&#39;padding-left:20px;&#39;&gt;取得できる明細数が500に満たないときは取得できる明細のみを返却します&lt;/p&gt;   &lt;p style&#x3D;&#39;padding-left:20px;&#39;&gt;取得できた明細数が500件の場合、まだ取得できる明細が残っている可能性がありますので、&lt;/p&gt;   &lt;p style&#x3D;&#39;padding-left:20px;&#39;&gt;「404：Not Found」が返却されるまで、リクエストを繰り返してください。&lt;/p&gt; &lt;/div&gt; 
     * @param authorization 認証情報 銀行システムが配信先システムに発行した、クライアントIDとクライアントシーレットを\&quot;:\&quot;（コロン）で連結し、Base64エンコードした値を設定 minLength: ‐ maxLength: ‐  (required)
     * @return VaDepositTransactionUnsentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VaDepositTransactionUnsentResponse accountsUsingGET(String authorization) throws ApiException {
        ApiResponse<VaDepositTransactionUnsentResponse> resp = accountsUsingGETWithHttpInfo(authorization);
        return resp.getData();
    }

    /**
     * 振込入金口座未送信明細取得
     * 配信停止状態となっている場合、本APIを利用することで未送信または送信エラーとなっている、振込入金口座の入金明細を一括で取得することができます 通常、未送信または送信エラーとなっている明細は配信再開後に通知されますが、本APIで取得された明細は配信済みとなるため、配信再開後には通知されません 未送信または送信エラーとなっている明細が無い場合は404 Not Foundを返却します &lt;p&gt;&lt;font color&#x3D;\&quot;red\&quot;&gt;※法人口座および個人事業主口座のみ対象となり、個人口座は対象外となります&lt;/font&gt;&lt;/p&gt; &lt;h4 style&#x3D;&#39;margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;&#39;&gt;詳細説明&lt;/h4&gt; &lt;div style&#x3D;&#39;margin:10px;&#39;&gt;   &lt;p style&#x3D;&#39;font-weight:bold; color:#616161;&#39;&gt;取得上限件数&lt;/p&gt;   &lt;p style&#x3D;&#39;padding-left:20px;&#39;&gt;500件&lt;/p&gt;   &lt;p style&#x3D;&#39;padding-left:20px;&#39;&gt;取得できる明細数が500に満たないときは取得できる明細のみを返却します&lt;/p&gt;   &lt;p style&#x3D;&#39;padding-left:20px;&#39;&gt;取得できた明細数が500件の場合、まだ取得できる明細が残っている可能性がありますので、&lt;/p&gt;   &lt;p style&#x3D;&#39;padding-left:20px;&#39;&gt;「404：Not Found」が返却されるまで、リクエストを繰り返してください。&lt;/p&gt; &lt;/div&gt; 
     * @param authorization 認証情報 銀行システムが配信先システムに発行した、クライアントIDとクライアントシーレットを\&quot;:\&quot;（コロン）で連結し、Base64エンコードした値を設定 minLength: ‐ maxLength: ‐  (required)
     * @return ApiResponse&lt;VaDepositTransactionUnsentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VaDepositTransactionUnsentResponse> accountsUsingGETWithHttpInfo(String authorization) throws ApiException {
        com.squareup.okhttp.Call call = accountsUsingGETValidateBeforeCall(authorization, null, null);
        Type localVarReturnType = new TypeToken<VaDepositTransactionUnsentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 振込入金口座未送信明細取得 (asynchronously)
     * 配信停止状態となっている場合、本APIを利用することで未送信または送信エラーとなっている、振込入金口座の入金明細を一括で取得することができます 通常、未送信または送信エラーとなっている明細は配信再開後に通知されますが、本APIで取得された明細は配信済みとなるため、配信再開後には通知されません 未送信または送信エラーとなっている明細が無い場合は404 Not Foundを返却します &lt;p&gt;&lt;font color&#x3D;\&quot;red\&quot;&gt;※法人口座および個人事業主口座のみ対象となり、個人口座は対象外となります&lt;/font&gt;&lt;/p&gt; &lt;h4 style&#x3D;&#39;margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;&#39;&gt;詳細説明&lt;/h4&gt; &lt;div style&#x3D;&#39;margin:10px;&#39;&gt;   &lt;p style&#x3D;&#39;font-weight:bold; color:#616161;&#39;&gt;取得上限件数&lt;/p&gt;   &lt;p style&#x3D;&#39;padding-left:20px;&#39;&gt;500件&lt;/p&gt;   &lt;p style&#x3D;&#39;padding-left:20px;&#39;&gt;取得できる明細数が500に満たないときは取得できる明細のみを返却します&lt;/p&gt;   &lt;p style&#x3D;&#39;padding-left:20px;&#39;&gt;取得できた明細数が500件の場合、まだ取得できる明細が残っている可能性がありますので、&lt;/p&gt;   &lt;p style&#x3D;&#39;padding-left:20px;&#39;&gt;「404：Not Found」が返却されるまで、リクエストを繰り返してください。&lt;/p&gt; &lt;/div&gt; 
     * @param authorization 認証情報 銀行システムが配信先システムに発行した、クライアントIDとクライアントシーレットを\&quot;:\&quot;（コロン）で連結し、Base64エンコードした値を設定 minLength: ‐ maxLength: ‐  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountsUsingGETAsync(String authorization, final ApiCallback<VaDepositTransactionUnsentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountsUsingGETValidateBeforeCall(authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VaDepositTransactionUnsentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
