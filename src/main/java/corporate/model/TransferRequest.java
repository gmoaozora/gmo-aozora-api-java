/*
 * GMO Aozora Net Bank Open API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package corporate.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * TransferRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-12-18T06:43:57.831Z")
public class TransferRequest {
  @SerializedName("accountId")
  private String accountId = null;

  @SerializedName("remitterName")
  private String remitterName = null;

  @SerializedName("transferDesignatedDate")
  private String transferDesignatedDate = null;

  @SerializedName("transferDateHolidayCode")
  private String transferDateHolidayCode = null;

  @SerializedName("totalCount")
  private String totalCount = null;

  @SerializedName("totalAmount")
  private String totalAmount = null;

  @SerializedName("applyComment")
  private String applyComment = null;

  @SerializedName("transfers")
  private List<Transfer> transfers = new ArrayList<>();

  public TransferRequest accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * 口座ID 半角英数字 口座を識別するID 
   * @return accountId
  **/
  @ApiModelProperty(example = "101011234567", required = true, value = "口座ID 半角英数字 口座を識別するID ")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public TransferRequest remitterName(String remitterName) {
    this.remitterName = remitterName;
    return this;
  }

   /**
   * 振込依頼人名 半角文字 指定しない場合は口座名義がデフォルト値となります 振込許容文字を指定可 ただし、一部の非許容文字は、許容文字に変換を行う 
   * @return remitterName
  **/
  @ApiModelProperty(example = "ｼﾞｰｴﾑｵｰｼｮｳｼﾞ(ｶ", value = "振込依頼人名 半角文字 指定しない場合は口座名義がデフォルト値となります 振込許容文字を指定可 ただし、一部の非許容文字は、許容文字に変換を行う ")
  public String getRemitterName() {
    return remitterName;
  }

  public void setRemitterName(String remitterName) {
    this.remitterName = remitterName;
  }

  public TransferRequest transferDesignatedDate(String transferDesignatedDate) {
    this.transferDesignatedDate = transferDesignatedDate;
    return this;
  }

   /**
   * 振込指定日 半角文字 YYYY-MM-DD形式 振込対象の指定日 ただし、振込指定日が非営業日で、非営業日に実施できない振込（他行宛振込み）が振込情報に1件以上存在する場合、以下のとおりとなります ・「振込指定日休日コード」が1または省略の場合、振込指定日の翌営業日を振込対象の指定日となります ・「振込指定日休日コード」が2の場合、振込指定日の前営業日を振込対象の指定日となります ・「振込指定日休日コード」が3の場合、エラーとなり「400 Bad Request」を返却します 
   * @return transferDesignatedDate
  **/
  @ApiModelProperty(example = "2018-07-30", required = true, value = "振込指定日 半角文字 YYYY-MM-DD形式 振込対象の指定日 ただし、振込指定日が非営業日で、非営業日に実施できない振込（他行宛振込み）が振込情報に1件以上存在する場合、以下のとおりとなります ・「振込指定日休日コード」が1または省略の場合、振込指定日の翌営業日を振込対象の指定日となります ・「振込指定日休日コード」が2の場合、振込指定日の前営業日を振込対象の指定日となります ・「振込指定日休日コード」が3の場合、エラーとなり「400 Bad Request」を返却します ")
  public String getTransferDesignatedDate() {
    return transferDesignatedDate;
  }

  public void setTransferDesignatedDate(String transferDesignatedDate) {
    this.transferDesignatedDate = transferDesignatedDate;
  }

  public TransferRequest transferDateHolidayCode(String transferDateHolidayCode) {
    this.transferDateHolidayCode = transferDateHolidayCode;
    return this;
  }

   /**
   * 振込指定日休日コード 半角数字 1：翌営業日、2：前営業日、3：エラー返却 省略可（省略した場合は1とみなします） 
   * @return transferDateHolidayCode
  **/
  @ApiModelProperty(example = "1", value = "振込指定日休日コード 半角数字 1：翌営業日、2：前営業日、3：エラー返却 省略可（省略した場合は1とみなします） ")
  public String getTransferDateHolidayCode() {
    return transferDateHolidayCode;
  }

  public void setTransferDateHolidayCode(String transferDateHolidayCode) {
    this.transferDateHolidayCode = transferDateHolidayCode;
  }

  public TransferRequest totalCount(String totalCount) {
    this.totalCount = totalCount;
    return this;
  }

   /**
   * 合計件数 半角数字 1以上99件まで指定可能（0はエラー） 1件のみの場合は省略可（項目自体を設定しません） 
   * @return totalCount
  **/
  @ApiModelProperty(example = "5", value = "合計件数 半角数字 1以上99件まで指定可能（0はエラー） 1件のみの場合は省略可（項目自体を設定しません） ")
  public String getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(String totalCount) {
    this.totalCount = totalCount;
  }

  public TransferRequest totalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

   /**
   * 合計金額 半角数字 1以上999,999,999,999円以下　数値のみで0、カンマ、マイナス不可 1件のみの場合は省略可（項目自体を設定しません） 
   * @return totalAmount
  **/
  @ApiModelProperty(example = "1234500", value = "合計金額 半角数字 1以上999,999,999,999円以下　数値のみで0、カンマ、マイナス不可 1件のみの場合は省略可（項目自体を設定しません） ")
  public String getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
  }

  public TransferRequest applyComment(String applyComment) {
    this.applyComment = applyComment;
    return this;
  }

   /**
   * 振込申請メモ（申請コメント） 全半角文字 法人かつ、ビジネスID管理利用中かつ、申請になるユーザーの場合のみ有効　それ以外は銀行で読み捨て 該当する情報が無い場合は省略可（項目自体を設定しません） 
   * @return applyComment
  **/
  @ApiModelProperty(example = "緊急で承認をお願いします", value = "振込申請メモ（申請コメント） 全半角文字 法人かつ、ビジネスID管理利用中かつ、申請になるユーザーの場合のみ有効　それ以外は銀行で読み捨て 該当する情報が無い場合は省略可（項目自体を設定しません） ")
  public String getApplyComment() {
    return applyComment;
  }

  public void setApplyComment(String applyComment) {
    this.applyComment = applyComment;
  }

  public TransferRequest transfers(List<Transfer> transfers) {
    this.transfers = transfers;
    return this;
  }

  public TransferRequest addTransfersItem(Transfer transfersItem) {
    this.transfers.add(transfersItem);
    return this;
  }

   /**
   * 振込情報 振込情報のリスト 
   * @return transfers
  **/
  @ApiModelProperty(required = true, value = "振込情報 振込情報のリスト ")
  public List<Transfer> getTransfers() {
    return transfers;
  }

  public void setTransfers(List<Transfer> transfers) {
    this.transfers = transfers;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferRequest transferRequest = (TransferRequest) o;
    return Objects.equals(this.accountId, transferRequest.accountId) &&
        Objects.equals(this.remitterName, transferRequest.remitterName) &&
        Objects.equals(this.transferDesignatedDate, transferRequest.transferDesignatedDate) &&
        Objects.equals(this.transferDateHolidayCode, transferRequest.transferDateHolidayCode) &&
        Objects.equals(this.totalCount, transferRequest.totalCount) &&
        Objects.equals(this.totalAmount, transferRequest.totalAmount) &&
        Objects.equals(this.applyComment, transferRequest.applyComment) &&
        Objects.equals(this.transfers, transferRequest.transfers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, remitterName, transferDesignatedDate, transferDateHolidayCode, totalCount, totalAmount, applyComment, transfers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferRequest {\n");

    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    remitterName: ").append(toIndentedString(remitterName)).append("\n");
    sb.append("    transferDesignatedDate: ").append(toIndentedString(transferDesignatedDate)).append("\n");
    sb.append("    transferDateHolidayCode: ").append(toIndentedString(transferDateHolidayCode)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    applyComment: ").append(toIndentedString(applyComment)).append("\n");
    sb.append("    transfers: ").append(toIndentedString(transfers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

