/*
 * GMO Aozora Net Bank Open API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package corporate.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * TransferQueryBulkResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-12-18T06:43:57.831Z")
public class TransferQueryBulkResponse {
  @SerializedName("dateFrom")
  private String dateFrom = null;

  @SerializedName("dateTo")
  private String dateTo = null;

  @SerializedName("requestNextItemKey")
  private String requestNextItemKey = null;

  @SerializedName("requestTransferStatuses")
  private List<RequestTransferStatus> requestTransferStatuses = null;

  @SerializedName("requestTransferClass")
  private String requestTransferClass = null;

  @SerializedName("requestTransferTerm")
  private String requestTransferTerm = null;

  @SerializedName("hasNext")
  private Boolean hasNext = null;

  @SerializedName("nextItemKey")
  private String nextItemKey = null;

  public TransferQueryBulkResponse dateFrom(String dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

   /**
   * 対象期間From 半角文字 リクエストしたときと同じ内容 対象期間（From）をYYYY-MM-DD形式で設定
   * @return dateFrom
  **/
  @ApiModelProperty(example = "2018-07-30", value = "対象期間From 半角文字 リクエストしたときと同じ内容 対象期間（From）をYYYY-MM-DD形式で設定 ")
  public String getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(String dateFrom) {
    this.dateFrom = dateFrom;
  }

  public TransferQueryBulkResponse dateTo(String dateTo) {
    this.dateTo = dateTo;
    return this;
  }

   /**
   * 対象期間To 半角文字 リクエストしたときと同じ内容 対象期間（To）をYYYY-MM-DD形式で設定
   * @return dateTo
  **/
  @ApiModelProperty(example = "2018-08-10", value = "対象期間To 半角文字 リクエストしたときと同じ内容 対象期間（To）をYYYY-MM-DD形式で設定 ")
  public String getDateTo() {
    return dateTo;
  }

  public void setDateTo(String dateTo) {
    this.dateTo = dateTo;
  }

  public TransferQueryBulkResponse requestNextItemKey(String requestNextItemKey) {
    this.requestNextItemKey = requestNextItemKey;
    return this;
  }

   /**
   * リクエスト時次明細キー 半角数字 リクエストしたときと同じ内容 該当する情報が無い場合はNULLを返却
   * @return requestNextItemKey
  **/
  @ApiModelProperty(example = "1234567890", value = "リクエスト時次明細キー 半角数字 リクエストしたときと同じ内容 該当する情報が無い場合はNULLを返却 ")
  public String getRequestNextItemKey() {
    return requestNextItemKey;
  }

  public void setRequestNextItemKey(String requestNextItemKey) {
    this.requestNextItemKey = requestNextItemKey;
  }

  public TransferQueryBulkResponse requestTransferStatuses(List<RequestTransferStatus> requestTransferStatuses) {
    this.requestTransferStatuses = requestTransferStatuses;
    return this;
  }

  public TransferQueryBulkResponse addRequestTransferStatusesItem(RequestTransferStatus requestTransferStatusesItem) {
    if (this.requestTransferStatuses == null) {
      this.requestTransferStatuses = new ArrayList<>();
    }
    this.requestTransferStatuses.add(requestTransferStatusesItem);
    return this;
  }

   /**
   * 振込一括照会対象ステータス 該当する情報が無い場合は項目自体を設定しません
   * @return requestTransferStatuses
  **/
  @ApiModelProperty(value = "振込一括照会対象ステータス 該当する情報が無い場合は項目自体を設定しません ")
  public List<RequestTransferStatus> getRequestTransferStatuses() {
    return requestTransferStatuses;
  }

  public void setRequestTransferStatuses(List<RequestTransferStatus> requestTransferStatuses) {
    this.requestTransferStatuses = requestTransferStatuses;
  }

  public TransferQueryBulkResponse requestTransferClass(String requestTransferClass) {
    this.requestTransferClass = requestTransferClass;
    return this;
  }

   /**
   * 照会対象取得区分 半角数字 リクエストしたときと同じ内容 1：ALL、2：振込申請のみ、3：振込受付情報のみ 該当する情報が無い場合は項目自体を設定しません
   * @return requestTransferClass
  **/
  @ApiModelProperty(example = "1", value = "照会対象取得区分 半角数字 リクエストしたときと同じ内容 1：ALL、2：振込申請のみ、3：振込受付情報のみ 該当する情報が無い場合は項目自体を設定しません ")
  public String getRequestTransferClass() {
    return requestTransferClass;
  }

  public void setRequestTransferClass(String requestTransferClass) {
    this.requestTransferClass = requestTransferClass;
  }

  public TransferQueryBulkResponse requestTransferTerm(String requestTransferTerm) {
    this.requestTransferTerm = requestTransferTerm;
    return this;
  }

   /**
   * 振込照会対象期間区分 半角数字 リクエストしたときと同じ内容 1：振込申請受付日　2：振込指定日 該当する情報が無い場合は項目自体を設定しません
   * @return requestTransferTerm
  **/
  @ApiModelProperty(example = "1", value = "振込照会対象期間区分 半角数字 リクエストしたときと同じ内容 1：振込申請受付日　2：振込指定日 該当する情報が無い場合は項目自体を設定しません ")
  public String getRequestTransferTerm() {
    return requestTransferTerm;
  }

  public void setRequestTransferTerm(String requestTransferTerm) {
    this.requestTransferTerm = requestTransferTerm;
  }

  public TransferQueryBulkResponse hasNext(Boolean hasNext) {
    this.hasNext = hasNext;
    return this;
  }

   /**
   * 次明細フラグ ・true&#x3D;次明細あり ・false&#x3D;次明細なし
   * @return hasNext
  **/
  @ApiModelProperty(example = "true", value = "次明細フラグ ・true=次明細あり ・false=次明細なし ")
  public Boolean isHasNext() {
    return hasNext;
  }

  public void setHasNext(Boolean hasNext) {
    this.hasNext = hasNext;
  }

  public TransferQueryBulkResponse nextItemKey(String nextItemKey) {
    this.nextItemKey = nextItemKey;
    return this;
  }

   /**
   * 次明細キー 半角数字 次明細フラグがfalseの場合はNULL
   * @return nextItemKey
  **/
  @ApiModelProperty(example = "1234567890", value = "次明細キー 半角数字 次明細フラグがfalseの場合はNULL ")
  public String getNextItemKey() {
    return nextItemKey;
  }

  public void setNextItemKey(String nextItemKey) {
    this.nextItemKey = nextItemKey;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferQueryBulkResponse transferQueryBulkResponse = (TransferQueryBulkResponse) o;
    return Objects.equals(this.dateFrom, transferQueryBulkResponse.dateFrom) &&
        Objects.equals(this.dateTo, transferQueryBulkResponse.dateTo) &&
        Objects.equals(this.requestNextItemKey, transferQueryBulkResponse.requestNextItemKey) &&
        Objects.equals(this.requestTransferStatuses, transferQueryBulkResponse.requestTransferStatuses) &&
        Objects.equals(this.requestTransferClass, transferQueryBulkResponse.requestTransferClass) &&
        Objects.equals(this.requestTransferTerm, transferQueryBulkResponse.requestTransferTerm) &&
        Objects.equals(this.hasNext, transferQueryBulkResponse.hasNext) &&
        Objects.equals(this.nextItemKey, transferQueryBulkResponse.nextItemKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateFrom, dateTo, requestNextItemKey, requestTransferStatuses, requestTransferClass, requestTransferTerm, hasNext, nextItemKey);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferQueryBulkResponse {\n");

    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    requestNextItemKey: ").append(toIndentedString(requestNextItemKey)).append("\n");
    sb.append("    requestTransferStatuses: ").append(toIndentedString(requestTransferStatuses)).append("\n");
    sb.append("    requestTransferClass: ").append(toIndentedString(requestTransferClass)).append("\n");
    sb.append("    requestTransferTerm: ").append(toIndentedString(requestTransferTerm)).append("\n");
    sb.append("    hasNext: ").append(toIndentedString(hasNext)).append("\n");
    sb.append("    nextItemKey: ").append(toIndentedString(nextItemKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

