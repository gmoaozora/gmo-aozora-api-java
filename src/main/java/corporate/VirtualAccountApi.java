/*
 * GMO Aozora Net Bank Open API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package corporate;

import com.google.gson.reflect.TypeToken;
import common.ApiCallback;
import common.ApiClient;
import common.ApiException;
import common.ApiResponse;
import common.BeanValidationException;
import common.Configuration;
import common.Pair;
import common.ProgressRequestBody;
import common.ProgressResponseBody;
import corporate.model.VaCloseRequest;
import corporate.model.VaCloseRequestResponse;
import corporate.model.VaDepositTransactionsResponse;
import corporate.model.VaIssueRequest;
import corporate.model.VaIssueResponse;
import corporate.model.VaListRequest;
import corporate.model.VaListResponse;
import corporate.model.VaStatusChangeRequest;
import corporate.model.VaStatusChangeResponse;
import java.io.IOException;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.ValidatorFactory;
import javax.validation.executable.ExecutableValidator;

public class VirtualAccountApi {
    private ApiClient apiClient;

    public VirtualAccountApi() {
        this(Configuration.getCorporateApiClient());
    }

    public VirtualAccountApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for depositTransactionsUsingGET
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param vaContractAuthKey 振込入金口座API認証情報 半角英数字 NULLを設定 値が設定されている場合は「400 Bad Request」を返却  minLength: 1 maxLength: 400  (optional)
     * @param raId 入金口座ID 半角数字 入金先の口座を識別するID 本値が設定されていない場合、振込入金口座IDは必須 科目コードが以下の口座IDのみ受け付けます ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用）  minLength: 12 maxLength: 29  (optional)
     * @param vaId 振込入金口座ID 半角数字 振込入金口座を識別するID 本値が設定されていない場合、入金口座IDは必須  minLength: 10 maxLength: 10  (optional)
     * @param dateFrom 対象期間From 半角文字 YYYY-MM-DD形式 指定する場合は照会する日付より6ヶ月以内の日付とし、超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param dateTo 対象期間To 半角文字 YYYY-MM-DD形式 指定する場合は照会する日付より6ヶ月以内の日付とし、超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param sortOrderCode ソート順コード 半角数字 取引日のソート順を指定するコード値 ・1&#x3D;昇順 ・2&#x3D;降順  minLength: 1 maxLength: 1  (optional)
     * @param nextItemKey 次明細キー 半角数字 初回要求時は未設定 初回応答で次明細キーが「true」の場合、返却された同項目を2回目以降に設定  minLength: 1 maxLength: 24  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call depositTransactionsUsingGETCall(String xAccessToken, String vaContractAuthKey, String raId, String vaId, String dateFrom, String dateTo, String sortOrderCode, String nextItemKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/va/deposit-transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vaContractAuthKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vaContractAuthKey", vaContractAuthKey));
        if (raId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("raId", raId));
        if (vaId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vaId", vaId));
        if (dateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateFrom", dateFrom));
        if (dateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateTo", dateTo));
        if (sortOrderCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrderCode", sortOrderCode));
        if (nextItemKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nextItemKey", nextItemKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccessToken != null)
        localVarHeaderParams.put("x-access-token", apiClient.parameterToString(xAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call depositTransactionsUsingGETValidateBeforeCall(String xAccessToken, String vaContractAuthKey, String raId, String vaId, String dateFrom, String dateTo, String sortOrderCode, String nextItemKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { xAccessToken, vaContractAuthKey, raId, vaId, dateFrom, dateTo, sortOrderCode, nextItemKey };
            Method method = this.getClass().getMethod("depositTransactionsUsingGETWithHttpInfo", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
            Set<ConstraintViolation<VirtualAccountApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = depositTransactionsUsingGETCall(xAccessToken, vaContractAuthKey, raId, vaId, dateFrom, dateTo, sortOrderCode, nextItemKey, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * 振込入金口座入金明細照会
     * 振込入金口座の入金明細を照会します ※個人事業主のみ対象となり、個人は対象外となります 対象期間From、対象期間Toを設定しない場合、当日分の入金明細を返却します ■ページング ・1回のリクエストで照会できる明細は、最大500件です ・2ページ目以降を照会する際は、初回と同じリクエスト内容に、初回レスポンスの次明細キーを追加してリクエストしてください  ■ソート順 ・デフォルト　取引日の昇順です。 　ソート順コードを指定することにより、ソート順を変更できます。
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param vaContractAuthKey 振込入金口座API認証情報 半角英数字 NULLを設定 値が設定されている場合は「400 Bad Request」を返却  minLength: 1 maxLength: 400  (optional)
     * @param raId 入金口座ID 半角数字 入金先の口座を識別するID 本値が設定されていない場合、振込入金口座IDは必須 科目コードが以下の口座IDのみ受け付けます ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用）  minLength: 12 maxLength: 29  (optional)
     * @param vaId 振込入金口座ID 半角数字 振込入金口座を識別するID 本値が設定されていない場合、入金口座IDは必須  minLength: 10 maxLength: 10  (optional)
     * @param dateFrom 対象期間From 半角文字 YYYY-MM-DD形式 指定する場合は照会する日付より6ヶ月以内の日付とし、超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param dateTo 対象期間To 半角文字 YYYY-MM-DD形式 指定する場合は照会する日付より6ヶ月以内の日付とし、超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param sortOrderCode ソート順コード 半角数字 取引日のソート順を指定するコード値 ・1&#x3D;昇順 ・2&#x3D;降順  minLength: 1 maxLength: 1  (optional)
     * @param nextItemKey 次明細キー 半角数字 初回要求時は未設定 初回応答で次明細キーが「true」の場合、返却された同項目を2回目以降に設定  minLength: 1 maxLength: 24  (optional)
     * @return VaDepositTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VaDepositTransactionsResponse depositTransactionsUsingGET(String xAccessToken, String vaContractAuthKey, String raId, String vaId, String dateFrom, String dateTo, String sortOrderCode, String nextItemKey) throws ApiException {
        ApiResponse<VaDepositTransactionsResponse> resp = depositTransactionsUsingGETWithHttpInfo(xAccessToken, vaContractAuthKey, raId, vaId, dateFrom, dateTo, sortOrderCode, nextItemKey);
        return resp.getData();
    }

    /**
     * 振込入金口座入金明細照会
     * 振込入金口座の入金明細を照会します ※個人事業主のみ対象となり、個人は対象外となります 対象期間From、対象期間Toを設定しない場合、当日分の入金明細を返却します ■ページング ・1回のリクエストで照会できる明細は、最大500件です ・2ページ目以降を照会する際は、初回と同じリクエスト内容に、初回レスポンスの次明細キーを追加してリクエストしてください  ■ソート順 ・デフォルト　取引日の昇順です。 　ソート順コードを指定することにより、ソート順を変更できます。
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param vaContractAuthKey 振込入金口座API認証情報 半角英数字 NULLを設定 値が設定されている場合は「400 Bad Request」を返却  minLength: 1 maxLength: 400  (optional)
     * @param raId 入金口座ID 半角数字 入金先の口座を識別するID 本値が設定されていない場合、振込入金口座IDは必須 科目コードが以下の口座IDのみ受け付けます ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用）  minLength: 12 maxLength: 29  (optional)
     * @param vaId 振込入金口座ID 半角数字 振込入金口座を識別するID 本値が設定されていない場合、入金口座IDは必須  minLength: 10 maxLength: 10  (optional)
     * @param dateFrom 対象期間From 半角文字 YYYY-MM-DD形式 指定する場合は照会する日付より6ヶ月以内の日付とし、超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param dateTo 対象期間To 半角文字 YYYY-MM-DD形式 指定する場合は照会する日付より6ヶ月以内の日付とし、超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param sortOrderCode ソート順コード 半角数字 取引日のソート順を指定するコード値 ・1&#x3D;昇順 ・2&#x3D;降順  minLength: 1 maxLength: 1  (optional)
     * @param nextItemKey 次明細キー 半角数字 初回要求時は未設定 初回応答で次明細キーが「true」の場合、返却された同項目を2回目以降に設定  minLength: 1 maxLength: 24  (optional)
     * @return ApiResponse&lt;VaDepositTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VaDepositTransactionsResponse> depositTransactionsUsingGETWithHttpInfo(String xAccessToken, String vaContractAuthKey, String raId, String vaId, String dateFrom, String dateTo, String sortOrderCode, String nextItemKey) throws ApiException {
        com.squareup.okhttp.Call call = depositTransactionsUsingGETValidateBeforeCall(xAccessToken, vaContractAuthKey, raId, vaId, dateFrom, dateTo, sortOrderCode, nextItemKey, null, null);
        Type localVarReturnType = new TypeToken<VaDepositTransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 振込入金口座入金明細照会 (asynchronously)
     * 振込入金口座の入金明細を照会します ※個人事業主のみ対象となり、個人は対象外となります 対象期間From、対象期間Toを設定しない場合、当日分の入金明細を返却します ■ページング ・1回のリクエストで照会できる明細は、最大500件です ・2ページ目以降を照会する際は、初回と同じリクエスト内容に、初回レスポンスの次明細キーを追加してリクエストしてください  ■ソート順 ・デフォルト　取引日の昇順です。 　ソート順コードを指定することにより、ソート順を変更できます。
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param vaContractAuthKey 振込入金口座API認証情報 半角英数字 NULLを設定 値が設定されている場合は「400 Bad Request」を返却  minLength: 1 maxLength: 400  (optional)
     * @param raId 入金口座ID 半角数字 入金先の口座を識別するID 本値が設定されていない場合、振込入金口座IDは必須 科目コードが以下の口座IDのみ受け付けます ・01&#x3D;普通預金（有利息） ・02&#x3D;普通預金（決済用）  minLength: 12 maxLength: 29  (optional)
     * @param vaId 振込入金口座ID 半角数字 振込入金口座を識別するID 本値が設定されていない場合、入金口座IDは必須  minLength: 10 maxLength: 10  (optional)
     * @param dateFrom 対象期間From 半角文字 YYYY-MM-DD形式 指定する場合は照会する日付より6ヶ月以内の日付とし、超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param dateTo 対象期間To 半角文字 YYYY-MM-DD形式 指定する場合は照会する日付より6ヶ月以内の日付とし、超えた場合は「400 Bad Request」を返却  minLength: 10 maxLength: 10  (optional)
     * @param sortOrderCode ソート順コード 半角数字 取引日のソート順を指定するコード値 ・1&#x3D;昇順 ・2&#x3D;降順  minLength: 1 maxLength: 1  (optional)
     * @param nextItemKey 次明細キー 半角数字 初回要求時は未設定 初回応答で次明細キーが「true」の場合、返却された同項目を2回目以降に設定  minLength: 1 maxLength: 24  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call depositTransactionsUsingGETAsync(String xAccessToken, String vaContractAuthKey, String raId, String vaId, String dateFrom, String dateTo, String sortOrderCode, String nextItemKey, final ApiCallback<VaDepositTransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = depositTransactionsUsingGETValidateBeforeCall(xAccessToken, vaContractAuthKey, raId, vaId, dateFrom, dateTo, sortOrderCode, nextItemKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VaDepositTransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for issueUsingPOST
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call issueUsingPOSTCall(String xAccessToken, VaIssueRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/va/issue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccessToken != null)
        localVarHeaderParams.put("x-access-token", apiClient.parameterToString(xAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call issueUsingPOSTValidateBeforeCall(String xAccessToken, VaIssueRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { xAccessToken, body };
            Method method = this.getClass().getMethod("issueUsingPOSTWithHttpInfo", String.class, VaIssueRequest.class);
            Set<ConstraintViolation<VirtualAccountApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = issueUsingPOSTCall(xAccessToken, body, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * 振込入金口座発行
     * 振込入金口座の発行を行います ※個人事業主のみ対象となり、個人は対象外となります
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @return VaIssueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VaIssueResponse issueUsingPOST(String xAccessToken, VaIssueRequest body) throws ApiException {
        ApiResponse<VaIssueResponse> resp = issueUsingPOSTWithHttpInfo(xAccessToken, body);
        return resp.getData();
    }

    /**
     * 振込入金口座発行
     * 振込入金口座の発行を行います ※個人事業主のみ対象となり、個人は対象外となります
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @return ApiResponse&lt;VaIssueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VaIssueResponse> issueUsingPOSTWithHttpInfo(String xAccessToken, VaIssueRequest body) throws ApiException {
        com.squareup.okhttp.Call call = issueUsingPOSTValidateBeforeCall(xAccessToken, body, null, null);
        Type localVarReturnType = new TypeToken<VaIssueResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 振込入金口座発行 (asynchronously)
     * 振込入金口座の発行を行います ※個人事業主のみ対象となり、個人は対象外となります
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call issueUsingPOSTAsync(String xAccessToken, VaIssueRequest body, final ApiCallback<VaIssueResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = issueUsingPOSTValidateBeforeCall(xAccessToken, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VaIssueResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for statusChangeUsingPOST
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call statusChangeUsingPOSTCall(String xAccessToken, VaStatusChangeRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/va/status-change";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccessToken != null)
        localVarHeaderParams.put("x-access-token", apiClient.parameterToString(xAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call statusChangeUsingPOSTValidateBeforeCall(String xAccessToken, VaStatusChangeRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { xAccessToken, body };
            Method method = this.getClass().getMethod("statusChangeUsingPOSTWithHttpInfo", String.class, VaStatusChangeRequest.class);
            Set<ConstraintViolation<VirtualAccountApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = statusChangeUsingPOSTCall(xAccessToken, body, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * 振込入金口座状態変更
     * 振込入金口座の状態変更（停止・再開・削除）を行います ※個人事業主のみ対象となり、個人は対象外となります
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @return VaStatusChangeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VaStatusChangeResponse statusChangeUsingPOST(String xAccessToken, VaStatusChangeRequest body) throws ApiException {
        ApiResponse<VaStatusChangeResponse> resp = statusChangeUsingPOSTWithHttpInfo(xAccessToken, body);
        return resp.getData();
    }

    /**
     * 振込入金口座状態変更
     * 振込入金口座の状態変更（停止・再開・削除）を行います ※個人事業主のみ対象となり、個人は対象外となります
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @return ApiResponse&lt;VaStatusChangeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VaStatusChangeResponse> statusChangeUsingPOSTWithHttpInfo(String xAccessToken, VaStatusChangeRequest body) throws ApiException {
        com.squareup.okhttp.Call call = statusChangeUsingPOSTValidateBeforeCall(xAccessToken, body, null, null);
        Type localVarReturnType = new TypeToken<VaStatusChangeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 振込入金口座状態変更 (asynchronously)
     * 振込入金口座の状態変更（停止・再開・削除）を行います ※個人事業主のみ対象となり、個人は対象外となります
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call statusChangeUsingPOSTAsync(String xAccessToken, VaStatusChangeRequest body, final ApiCallback<VaStatusChangeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = statusChangeUsingPOSTValidateBeforeCall(xAccessToken, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VaStatusChangeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for vaCloseRequestUsingPOST
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call vaCloseRequestUsingPOSTCall(String xAccessToken, VaCloseRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/va/close-request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccessToken != null)
        localVarHeaderParams.put("x-access-token", apiClient.parameterToString(xAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call vaCloseRequestUsingPOSTValidateBeforeCall(String xAccessToken, VaCloseRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { xAccessToken, body };
            Method method = this.getClass().getMethod("vaCloseRequestUsingPOSTWithHttpInfo", String.class, VaCloseRequest.class);
            Set<ConstraintViolation<VirtualAccountApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = vaCloseRequestUsingPOSTCall(xAccessToken, body, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * 振込入金口座解約申込
     * 振込入金口座契約の解約申込を行います ※個人事業主のみ対象となり、個人は対象外となります
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @return VaCloseRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VaCloseRequestResponse vaCloseRequestUsingPOST(String xAccessToken, VaCloseRequest body) throws ApiException {
        ApiResponse<VaCloseRequestResponse> resp = vaCloseRequestUsingPOSTWithHttpInfo(xAccessToken, body);
        return resp.getData();
    }

    /**
     * 振込入金口座解約申込
     * 振込入金口座契約の解約申込を行います ※個人事業主のみ対象となり、個人は対象外となります
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @return ApiResponse&lt;VaCloseRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VaCloseRequestResponse> vaCloseRequestUsingPOSTWithHttpInfo(String xAccessToken, VaCloseRequest body) throws ApiException {
        com.squareup.okhttp.Call call = vaCloseRequestUsingPOSTValidateBeforeCall(xAccessToken, body, null, null);
        Type localVarReturnType = new TypeToken<VaCloseRequestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 振込入金口座解約申込 (asynchronously)
     * 振込入金口座契約の解約申込を行います ※個人事業主のみ対象となり、個人は対象外となります
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call vaCloseRequestUsingPOSTAsync(String xAccessToken, VaCloseRequest body, final ApiCallback<VaCloseRequestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = vaCloseRequestUsingPOSTValidateBeforeCall(xAccessToken, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VaCloseRequestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for vaListUsingPOST
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call vaListUsingPOSTCall(String xAccessToken, VaListRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/va/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAccessToken != null)
        localVarHeaderParams.put("x-access-token", apiClient.parameterToString(xAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call vaListUsingPOSTValidateBeforeCall(String xAccessToken, VaListRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { xAccessToken, body };
            Method method = this.getClass().getMethod("vaListUsingPOSTWithHttpInfo", String.class, VaListRequest.class);
            Set<ConstraintViolation<VirtualAccountApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = vaListUsingPOSTCall(xAccessToken, body, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * 振込入金口座一覧照会
     * 振込入金口座一覧を照会します ※個人事業主のみ対象となり、個人は対象外となります ソート順コードを指定しない場合、発行日時の昇順です ■ページング ・1回のリクエストで照会できる明細は、最大500件です ・2ページ目以降を照会する際は、初回と同じリクエスト内容に、初回レスポンスの次一覧キーを追加してリクエストしてください ■振込入金口座API認証情報 ・提携企業契約時は必須で、この値が設定されていない場合、銀行契約の一覧照会を提供する 
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @return VaListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VaListResponse vaListUsingPOST(String xAccessToken, VaListRequest body) throws ApiException {
        ApiResponse<VaListResponse> resp = vaListUsingPOSTWithHttpInfo(xAccessToken, body);
        return resp.getData();
    }

    /**
     * 振込入金口座一覧照会
     * 振込入金口座一覧を照会します ※個人事業主のみ対象となり、個人は対象外となります ソート順コードを指定しない場合、発行日時の昇順です ■ページング ・1回のリクエストで照会できる明細は、最大500件です ・2ページ目以降を照会する際は、初回と同じリクエスト内容に、初回レスポンスの次一覧キーを追加してリクエストしてください ■振込入金口座API認証情報 ・提携企業契約時は必須で、この値が設定されていない場合、銀行契約の一覧照会を提供する 
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @return ApiResponse&lt;VaListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VaListResponse> vaListUsingPOSTWithHttpInfo(String xAccessToken, VaListRequest body) throws ApiException {
        com.squareup.okhttp.Call call = vaListUsingPOSTValidateBeforeCall(xAccessToken, body, null, null);
        Type localVarReturnType = new TypeToken<VaListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 振込入金口座一覧照会 (asynchronously)
     * 振込入金口座一覧を照会します ※個人事業主のみ対象となり、個人は対象外となります ソート順コードを指定しない場合、発行日時の昇順です ■ページング ・1回のリクエストで照会できる明細は、最大500件です ・2ページ目以降を照会する際は、初回と同じリクエスト内容に、初回レスポンスの次一覧キーを追加してリクエストしてください ■振込入金口座API認証情報 ・提携企業契約時は必須で、この値が設定されていない場合、銀行契約の一覧照会を提供する 
     * @param xAccessToken アクセストークン  minLength: 1 maxLength: 128  (required)
     * @param body HTTPリクエストボディ (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call vaListUsingPOSTAsync(String xAccessToken, VaListRequest body, final ApiCallback<VaListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = vaListUsingPOSTValidateBeforeCall(xAccessToken, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VaListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
